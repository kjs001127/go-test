// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TestInterface is an autogenerated mock type for the TestInterface type
type TestInterface struct {
	mock.Mock
}

type TestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TestInterface) EXPECT() *TestInterface_Expecter {
	return &TestInterface_Expecter{mock: &_m.Mock}
}

// DoSomething provides a mock function with given fields: _a0, _a1
func (_m *TestInterface) DoSomething(_a0 int, _a1 string) (int, error) {
	ret := _m.Called(_a0, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, string) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestInterface_DoSomething_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoSomething'
type TestInterface_DoSomething_Call struct {
	*mock.Call
}

// DoSomething is a helper method to define mock.On call
//  - _a0 int
//  - _a1 string
func (_e *TestInterface_Expecter) DoSomething(_a0 interface{}, _a1 interface{}) *TestInterface_DoSomething_Call {
	return &TestInterface_DoSomething_Call{Call: _e.mock.On("DoSomething", _a0, _a1)}
}

func (_c *TestInterface_DoSomething_Call) Run(run func(_a0 int, _a1 string)) *TestInterface_DoSomething_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(string))
	})
	return _c
}

func (_c *TestInterface_DoSomething_Call) Return(_a0 int, _a1 error) *TestInterface_DoSomething_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTestInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewTestInterface creates a new instance of TestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTestInterface(t mockConstructorTestingTNewTestInterface) *TestInterface {
	mock := &TestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
